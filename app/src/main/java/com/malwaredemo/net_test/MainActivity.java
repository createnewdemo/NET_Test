package com.malwaredemo.net_test;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import org.json.JSONObject;

import java.io.IOException;
import java.security.MessageDigest;
import java.util.Map;
import java.util.TreeMap;


import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;

public class MainActivity extends AppCompatActivity {
    public Button login_button,resetBtn;
    public TextView txt_user,txt_pwd;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);//呈现页面出来
        initView();
        initListener();
        SharedPreferences ddd = getSharedPreferences("ddd", MODE_PRIVATE);
        SharedPreferences.Editor edit = ddd.edit();
        edit.putString("token","dwadawd");
        edit.commit();


    }
    //initView
    private void  initView(){
        //找到 文本输入框
         txt_user  = findViewById(R.id.text_user);
         txt_pwd  = findViewById(R.id.text_pwd);
         login_button = findViewById(R.id.btn_login);
          resetBtn = findViewById(R.id.btn_reset);
    }
    //initListener
    private void initListener(){
        login_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                doLogin();
            }
        });
        resetBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                doReset();
            }
        });
    }
    private void doReset() {
        txt_pwd.setText("");
        txt_user.setText("");
        Log.e("日志","点击重置按钮");
    }
    private void doLogin(){


        //1 获取输入的数据
        String user = String.valueOf(txt_user.getText());
        String pwd = String.valueOf(txt_pwd.getText());

        TreeMap<String,String> map = new TreeMap<>();
        map.put("user",user);
        map.put("pwd",pwd);

        StringBuilder sb = new StringBuilder();
        for(Map.Entry<String,String> entry : map.entrySet()){
            String key = entry.getKey();
            String value = entry.getValue();
            sb.append(key);
            sb.append("=");
            sb.append(value);
            sb.append("&");
        }
        sb.deleteCharAt(sb.length() - 1);
        String res = sb.toString();
        Log.e("===========>",res);

        String sign = md5(res);
        map.put("sign",sign);
            /*
        //创建拦截器
        Interceptor interceptor =  new Interceptor(){
            @NonNull
            @Override
            public Response intercept(@NonNull Chain chain) throws IOException {
                Request request = chain.request().newBuilder()
                        .addHeader("demoli","18544596921")
                        .addHeader("sign","265265955")
                        .build();
                //请求前
                Response response = chain.proceed(request);

                //请求后
                return response;
            }
        };
        new Thread(){
            @Override
            public void run() {
                //2 发送网络请求 okttp + 创建线程
                //创建Okhttp对象
                OkHttpClient client = new OkHttpClient
                        .Builder()
                        .addInterceptor(interceptor)
                        .build();
                //创建请求body  自动拼接 pwd=vgvf&user=tfgg
//                FormBody formBody = new FormBody.Builder()
//                        .add("user",user)
//                        .add("pwd",pwd)
//                        .add("sign",sign).build();
                //直接传入json数据给body  {“user”:...}
                JSONObject jsonObject = new JSONObject(map);
                String jsString = jsonObject.toString();
                RequestBody requestBody = RequestBody.create(jsString, MediaType.parse("application/json;charset=utf-8"));
                //创建请求对象
                Request req = new Request.Builder()
                        .url("http://192.168.137.1:9898/login")
                        .addHeader("Connection", "close")
                        .post(requestBody)
                        .build();
                //客户端创建新请求
                Call call = client.newCall(req);

                try {
                    Response response = call.execute();
                    ResponseBody responseBody = response.body();
                    String dataString = responseBody.string();
                    Log.e("response ===>",dataString);
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        }.start();
*/


        new Thread(){
            @Override
            public void run() {
                //创建 retrofit对象
                Retrofit retrofit = new Retrofit.Builder().baseUrl("http://192.168.137.1:9898/").build();

                //实现接口
                HttpReq httpReq = retrofit.create(HttpReq.class);
                //Call<ResponseBody> responseBodyCall = httpReq.postLogin(user, pwd);
                JSONObject jsonObject = new JSONObject(map);
                String jsonString = jsonObject.toString();
                RequestBody requestBody = RequestBody.create(jsonString, MediaType.parse("application/json;charset=utf-8"));
                Call<ResponseBody> responseBodyCall = httpReq.postLoginJson(requestBody);
                //发送请求 执行call.excute
                try {
                    Response<ResponseBody> response = responseBodyCall.execute();
                    //ResponseBody responseBody = response.body();
                    Log.e("Retrofit返回的结果 ：", String.valueOf(response.code()));
//                    String responseString = responseBody.string();
//                    Log.e("Retrofit返回的结果 ：",responseString);
                } catch (IOException e) {
                    e.printStackTrace();
                }


            }
        }.start();



        // 3 获取结果

    }
    /**
     * md5加密
     *
     * @param dataString 待加密的字符串
     * @return 加密结果
     */
    private String md5(String dataString) {
        try {
            MessageDigest instance = MessageDigest.getInstance("MD5");
            byte[] nameBytes = instance.digest(dataString.getBytes());

            // 十六进制展示
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < nameBytes.length; i++) {
                int val = nameBytes[i] & 255;  // 负数转换为正数
                if (val < 16) {
                    sb.append("0");
                }
                sb.append(Integer.toHexString(val));
            }
            return sb.toString();
        } catch (Exception e) {
            return null;
        }

    }
}